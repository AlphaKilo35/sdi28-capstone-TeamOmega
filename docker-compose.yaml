#Assumes Node.js React Frontend, Express.js API server, & PostgreSQL Database

volumes:
  postgres_volume:
  node_modules:  # To avoid overwriting node_modules inside the container

services:

  frontend:
    build: frontend/
    container_name: 'frontend'
    depends_on:
      - database
    env_file:
      - .env
    environment:
      - VITE_PORT=${VITE_PORT}
    ports:
      - '5173:5173' # Default Vite port
    volumes:
      - ./frontend:/usr/src/app  # Mount local frontend folder
      - node_modules:/usr/src/app/node_modules  # Keep node_modules intact
    command: npm run dev
    networks:
      - appnetwork

  backend:
    build: backend/
    container_name: 'backend'
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - EXPRESS_PORT=${EXPRESS_PORT}
    ports:
      - '3000:3000' # Default Express.js port
    volumes:
      - ./backend:/usr/src/app  # Mount local backend folder
      - node_modules:/usr/src/app/node_modules  # Avoid node_modules overwrite
    command: npm run dev  # Run the backend in development mode
    networks:
      - appnetwork

  database:
    image: postgres
    container_name: database
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    networks:
      - appnetwork

    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB_NAME}'" ]
      interval: 1s
      timeout: 3s
      retries: 3

networks:
  appnetwork:
    driver: bridge
